#!/usr/bin/env python
import re
import sys
import tarfile
from os.path import basename

import ilan_dev
from ilan_dev import lcp, human_bytes, get_empty_dirs


cext_pat = re.compile(r'''
.*lib/
python\d\.\d+/
(site-packages|lib-dynload)/
(?P<mod>\S+?)                   # actual module name
\.cp[\w\-]+\.so
$''', re.VERBOSE)

def show_cext(path):
    res = []
    with tarfile.open(path) as t:
        for m in t.getmembers():
            match = cext_pat.match(m.name)
            if match is not None:
                res.append(match.group('mod').replace('/', '.'))
    for mod in sorted(res):
        print('import', mod)


def tar_nameset(path):
    with tarfile.open(path) as t:
        return set(m.name for m in t.getmembers())


def tar_common(paths):
    a = tar_nameset(paths[0])
    for path in paths[1:]:
        a &= tar_nameset(path)
    return a


def tar_show_diff(path_a, path_b):
    a = tar_nameset(path_a)
    b = tar_nameset(path_b)

    lst = []
    for c in a - b:
        lst.append((c, '-'))
    for c in b - a:
        lst.append((c, '+'))
    if not lst:
        return
    print('---', path_a)
    print('+++', path_b)
    for e, s in sorted(lst):
        print(s + str(e))


def show_stat(path):
    nfiles = nsym = nlnk = ndirs = 0
    names = []
    with tarfile.open(path) as t:
        for m in t.getmembers():
            names.append((m.name, m.isdir()))
            if m.isfile(): nfiles += 1
            if m.issym(): nsym += 1
            if m.islnk(): nlnk += 1
            if m.isdir(): ndirs += 1

    print("        regular files: %7d" % nfiles)
    print("       symbolic links: %7d" % nsym)
    print("           hard links: %7d" % nlnk)
    print("          directories: %7d" % ndirs)
    print("           empty dirs: %7d" % len(get_empty_dirs(names)))
    print("       total archives: %7d" % len(names))
    print("longest common prefix: %r" % lcp([name for name, _ in names]))


def help():
    print("""\
usage: %s [options] COMMAND [TAR ...]",

display useful information about tar files

Commands:
  cext        list Python C extension imports
  common      list archive name common in all tarballs
  diff        show difference of two tarballs (compares archive names only)
  ed          list empty directories
  lcp         show the longest common prefix of all archive names
  ls          list archive members, similar to 'ls -l'
  stat        display a useful summart of information
  size        list file sizes of all archives (sorted by size)

Options:
  -h, --help  show this help message and exit
  --version
""" % basename(sys.argv[0]))


def main():
    args = sys.argv[1:]
    if len(args) == 0 or '-h' in args or '--help' in args:
        help()
        return

    if "--version" in args:
        print("ilan-dev: %s" % ilan_dev.__version__)
        return

    cmd, args = args[0], args[1:]

    if cmd == 'common':
        if len(args) == 0:
            sys.exit("'common' requires at least one tar archive, try --help")
        for x in sorted(tar_common(args)):
            print(x)
        return

    if cmd == 'diff':
        if len(args) != 2:
            sys.exit("'diff' requires exactly two tar archives, try --help")
        tar_show_diff(*args)
        return

    if '.' in cmd or '-' in cmd:
        sys.exit("no such command %r, try --help" % cmd)

    for path in args:
        if not path.endswith(('.tar', '.tar.bz2', '.tar.gz', '.tgz')):
            print('ignoring:', path)
            continue

        if len(args) > 1:
            print("==> %s <==" % path)

        if cmd == 'cext':
            show_cext(path)

        elif cmd == 'ed':
            for name in sorted(tar_get_empty_dirs(path)):
                print(name)

        elif cmd == 'lcp':
            with tarfile.open(path) as t:
                s = lcp(m.name for m in t.getmembers())
                if s:
                    print(s)

        elif cmd == 'ls':
            with tarfile.open(path) as t:
                t.list()

        elif cmd == 'size':
            with tarfile.open(path) as t:
                lst = [(m.size, m.name) for m in t.getmembers()]
                for size, name in sorted(lst):
                    print("%-60s %10s" % (name, human_bytes(size)))

        elif cmd == 'stat':
            show_stat(path)

        else:
            sys.exit("no such command %r, try --help" % cmd)


if __name__ == '__main__':
    main()
